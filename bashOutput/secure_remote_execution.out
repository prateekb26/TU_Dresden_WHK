

This adds an alias (**caroline**) for the host identified by option **--hostname**. The argument **--hostname** can either be a hostname or an IP address. The CLI generates a key pair inside the container and stores it in **/conf**. The public key is used to grant access to the container on the remote host.  

The output of **add-host** will look something like this:

ssh ubuntu@1.2.3.4 "echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDXVqr0diJjgMPx7WNTQWJVhV3ea8L1I/8mDZTsQUH5gazB+laIiM7tEAKbddbessItmA9bLOZEq4CIrYmtXpjG2tBSES2YpqNhQ8+3r4U3ozSBD1XAc6OzRmnHP+wmuVpCQw0QxBKj0Qq5MCehmLIXLYephOtjVWwsA3EprVHIq0+/wYZp4mU3evCgcvE46nxOrmHzu5X4iDUMSY59XHdavIVkkS87qp4RlyFQa0gBRHOfcGEVJ3oS/pmKHxasdLwjiVmCovLG4RPS88RoKCf8zWis8vpPUKt/04xjlj4gqsV/U7VR2S/kFcvq1yuvOno+BhcsGme2U2CKTV4Y16ZJ scone-CLI\" >> .ssh/authorized_keys"

Copy this output and execute on your local client to give the container access to the remote host.

<center>
![add-host: add ssh credentials](img/add-host.png)
</center>

## Execution

To execute an application on a remote host, you first have to add this host via **add-host** as described above.
We show how to execute the simple **copy application** that we introduce in the [next section of this tutorial](dapps.md). This copy application takes some input files in a given directory **INPUTS** and copies these files to directory **OUTPUTS** in a very elaborate way:

 - encrypt the files in directory **INPUTS** inside the container running on the client machine
 - push the encrypted files to a **remote file service** - which is operated by an entity that we do not know
 - start the **copy application** container on a remote host - which is given via option **--host HOST** 
 - a script running inside the container pulls the encrypted files from the remote file service
 - the script starts the **copy application** inside of an enclave
 - the SCONE runtime transparently decrypts the input files and transparently encrypts the output files
 - the SCONE runtime ensures both the confidentiality as well as the integrity of the files
 - the copy applications copies the input files to the output files and then terminates
 - the shell script pushes the encrypted output files to the **remote file service**
 - the CLI pulls the output files from the **remote file service** and decrypts the files and stores the files inside the OUTPUT directory.

The copy application is stored in image **sconecuratedimages/iexecsgx:copy_demo** on **hub.docker.com**. You can execute this image as follows:


### Example: Copy Demo

You could perform the following steps to see the **copy_demo** in action. Create some directory and a file to copy.


Now execute the copy application (as shown above):


The file **f1.txt** was copied to directory **OUTPUTS**.
You can check the output, by executing:


which results in the output:

Hello World

<center>
![execute: single step secure remote execution](img/execute.png)
</center>

## Example: Blender

We show to run blender with a blender file. To do so, show to render some blender file from our collaborator iExec
as well as some other blender files accessible via github.

### Setup

Let's set up an EXAMPLE directory and create some sub-directories for input and output files.
We also need to specify 

- a remote file service like **transfer.sh** or **filepush.co/upload**, and
- an instance of the **SCONE CAS** configuration and attestation service. 
  

To reduce the typing, let's define an *alias* for the secure remote execution of blender:


We assume that you added the host (in this case **caroline**) already via **add-host** (see above).

### Render Image

Let's first download a blender file:


and we **render** this blender file remotely ensuring all artifacts are **always encrypted**:


We can now look at the files in OUTPUT directory:


Which shows the following picture which was computed using **always encrypted** approach:

<center>
![Computed Image](img/0001.png)
</center>

### Cube

Let's download another blender file from github:


and render this blender file on the remote and untrusted host **caroline**:


The OUTPUT directory contains the following picture - which was computed remotely with all data and processing being **always encrypted**:

<center>
![Cube](img/cube-0001.png)
</center>

### Helicopter Example

Another example from **github**:


We are execution with the same command as above:


The OUTPUT directory contains the following picture - which was computed remotely with all data and processing being **always encrypted**:

<center>
![Hellicopter cycles](img/scene-Helicopter-27-cycles-0001.png)
</center>

### Car Example

We show one more example:


and render this (as above):


The OUTPUT directory contains the following picture - which was computed remotely with all data and processing being **always encrypted**:

<center>
![BMW](img/car-0001.png)
</center>

## Advanced Example

You can also run **blender** with Python scripts that describe your images and movies - see  [blender use case](blender.md) for details.

&copy; [scontain.com](http://www.scontain.com), January 2019. [Questions or Suggestions?](mailto:info@scontain.com)