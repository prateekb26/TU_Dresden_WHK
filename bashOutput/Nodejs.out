

## Example

Let's look at a little *hello world* program. First, we need to start a **node** container: 


In case you have no sgx driver installed, you can drop option **--device=/dev/isgx** for testing. **The programs will then run in simulation mode**, i.e., the SCONE software runs but in native mode and not inside an enclave.

Inside of the container, we first add **npm**: 

apk add --no-cache nodejs-npm

Ensure we can run even in a resource-constrainted VM by setting the maximum heap size to a reasonable value of 1GB:

export SCONE_HEAP=1G

We create a new application **myapp**:


We install **express** with the help of **npm**:


Let's store the **hello world** code:


We can run this application inside of an enclave with **node**. We can also enable some debug
messages by setting environment variable **SCONE_VERSION=1** to print that we run inside of an enclave:


This results in an output like this:


You can now try to send a request to **myapp** from another shell in the container.
Assuming that you did not start a new container in meantime, execute in another
shell of your host:


Inside of the container, first install **curl** and then query **myapp**:


This results in an output like this:


Potential error messages:

!!! error "Could not create enclave: Error opening SGX device"
    Your machine / container does not support SGX. Set mode to automatic via **SCONE_MODE=AUTO**:
    in AUTO mode, SCONE will use SGX enclaves when available and emulation mode otherwise. 


!!! error "Killed"
    Your machine / container has most likely too little memory: the Linux OOM (Out
    Of Memory) killer, terminated your program. Try to reduce memory size by reducing
    environment variable **SCONE_HEAP** appropriately.

!!! failure "errno ENOSYS"
    SCONE does not yet support the **fork** system call (- this will happen later this year).
    If you spawn processes, there will be some error message like:
    **npm ERR! spawn ENOSYS**


## Environment variables

SGXv1 cannot dynamically increase the memory of an enclave. Hence, we have to determine the maximum heap (and stack) size at program start: you can increase the heap by setting environment variable **SCONE_HEAP**, e.g., **SCONE_HEAP=8G**.
In case you run out of memory inside the enclave, increase the heap size. In case your program gets **killed** by the OS, you might have selected a too large heap that is not supported by your VM or your host.

Similarily, you can increase the stack size of threads running inside of enclaves by setting environment variable **SCONE_STACK**.

Environment variable **SCONE_VERSION=1** prints debug messages - to show that the program runs inside of an enclave.

**SCONE_MODE=hw** enforce that program runs in hardware enclave. By default, we set **SCONE_MODE=auto** which uses hardware enclave if available 
and software emulation otherwise.

## Dockerfile

The above example, you could more easily put the following text in a Dockerfile:


Now create an image **myapp** as follows:


You can run a container of this image as a daemon as follows:


You can now query **myapp** as follows:


This results in an output like this:




&copy; [scontain.com](http://www.scontain.com), March 2018. [Questions or Suggestions?](mailto:info@scontain.com)