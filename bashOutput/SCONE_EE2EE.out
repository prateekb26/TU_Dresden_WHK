

We have prepared an nginx image that contains this website as encrypted files and nginx is running inside of an enclave reading the encrypted files
from the file system and decrypting these files inside the enclave.

Let's assume that we have the newest image in our local swarm registry:


We will start this service as a stack. Hence, we define a simple stack/compose file:


We explain in section [MrEnclave](MrEnclave.md) how to determine mrenclave.

For now, this file contains some metadata related to the encrypted files:

- **fspf_path** the path of the *file system protection file*
- **fspf_key** the key used to encrypt the *file system protection file*
- **fspf_tag** the tag (i.e., MAC) of the *file system protection file*

We provide a low level for encrypting files with the help of [scone fspf](SCONE_Fileshield.md). (We will soon release a higher level support that will simplify the encryption of files). 

In this swarm, we have a CAS (Configuration and Attestation Service running): the CAS helps
us to to pass some secrets like the **fspf_key** to an enclave and protecting both
the confidentiality as well as the integrity of this secret.

Clients can identify the CAS via its certificate. In this example,
we explicitly specify the certificate of the CAS:


and now log into the CAS:


We split our stack file into two parts: public part sent to the docker engine and a secret part that is directly sent to the CAS:


For now, the stack ID is a randomly chose unique ID. If you want to modify this stack later, you need to use the same stack ID.  


Show public part that is sent to **docker stack** (which is the original stack file name appended with "docker.yml"):


Note: in the above example we assume that the host on which nginx is running is available at address  **172.17.0.1**. Hence, the **LAS** is available at  address **"172.17.0.1:18766**. In case you run a non-standard configuration, you might need to change  **SCONE_LAS_ADDR** to the ip address and port where the LAS  is available. The LAS must run on the same host for the attestation to work.


We can now deploy the service with the help of docker/scone stack:


Show running stack:


We can get some more information about this stack:


## File Encryption

Let's check that the files inside of nginx container are indeed encrypted. To do so, we ssh to node  **dorothy** and execute the following commands:


Let's look inside the container:


The nginx configuration file as well as the html files should be encrypted. Let's verify this:


Ok, the nginx configuration file seems to be encrypted. Now, look at the html files too:


&copy; [scontain.com](http://www.scontain.com), December 2017. [Questions or Suggestions?](mailto:info@scontain.com)