
name: $SESSION
digest: create

services:
   - name: application
     image_name: sconecuratedimages/iexecsgx:copy_demo
     mrenclaves: [e0f45a9a862c83f383730cc2aef144081025e3f925615da5b35c4d980faaa3c9]
     tags: [demo]
     command: /application
     pwd: /
     environment:
        SCONE_MODE: hw

volumes:
   - name: encrypted-input-files
     fspf_tag: $INPUT_FSPF_TAG
     fspf_key: $INPUT_FSPF_KEY
   - name: encrypted-output-files
     fspf_tag: $OUTPUT_FSPF_TAG
     fspf_key: $OUTPUT_FSPF_KEY

images:
   - name: sconecuratedimages/iexecsgx:copy_demo
     mrenclaves: [e0f45a9a862c83f383730cc2aef144081025e3f925615da5b35c4d980faaa3c9]
     tags: [demo]
     volumes:
        - name: encrypted-input-files
          path: /encryptedInputs
        - name: encrypted-output-files
          path: /encryptedOutputs

Note that in most cases you can start from a generic session template and you do not need to worry about the syntax and all the details of session descriptions.
The session templates of trusted DApps look very similar to the session template above.
The three differences are that

- the **image name** will be updated,
- the list of **mrenclaves** will be different, and
- one might want to specify arguments passed to the trusted DApp (**key command**).

## Building an DApp

The [source code of this application](https://github.com/scontain/copy_dapp), you can retrieve from


The source code of the trusted copy DApp is file [*copy_files.c*](https://github.com/scontain/copy_dapp/blob/master/copy_files.c).

We build this program with the help of the standard
**gcc** that is part of Alpine Linux (see the Dockerfile below). For convenience,
we provide an Alpine image (i.e., sconecuratedimages/muslgcc) that has **gcc** preinstalled.

FROM sconecuratedimages/muslgcc

COPY copy_files.c  /

# compile with vanilla gcc
RUN gcc -Wall copy_files.c -o /copy_files

FROM iexechub/sgx-scone:runtime

COPY --from=0 /copy_files /application

RUN apk add curl bash unzip zip

ENTRYPOINT ["/application.sh"]

To run the application inside of an enclave, we need the SCONE
runtime environment. This runtime is part of image **iexechub/sgx-scone:runtime**.
Moreover, this image contains a script **/application.sh** that pulls
the encrypted input and output volumes from some transfer service, 
executes the application inside of an enclave. For testing, the script can push the encrypted output volume to a transfer service (see below).  

The image **sconecuratedimages/iexecsgx:copy_demo**
**MrEnclave** of the application and writes a **session template** *copy_dapp.yml*.

## Testing

We now show how to test the trusted copy DApp. After building the image
by executing


We can execute this image on a SGX-capable host. This host has to have the SCONE local attestation service and Docker installed. We describe in the [installation section](iexec_install.md) on how to install these prerequisites.

In what follows, we assume that the name of the host is stored in environment variable **host**.

### SETUP

To execute the trusted copy DApp, we need to create some files to copy.
We create an INPUTS directory and store some files there.
We also create some OUTPUTS directory and some directory to hold some generated keys (KEYS) and
to hold some temporary files (ZIP). We also copy the session template generated when building the
container image.


### Step 1

We encrypt these files and push the zipped up files for now to **filepush.co**.

Let's execute the first step of encrypting the files and pushing these to the transfer service:


Let's look at the output:


should result in an output like:


You can look in your browser at the URL to see the uploaded files!

### Step 2

Before running this application on the iExec platform, we might
want to test it on some SGX-capable host.

Ensure that the newest image is loaded on **host**. This step is only needed if it is expected that the image has changed
since **docker run** does not pull/update the image.



Let's look at the output:


this results in an output like:


You can now download this (if running a **bash** shell) 


### Step 3


We can now look at the files in OUTPUTS directory:





&copy; [scontain.com](http://www.scontain.com), November 2018. [Questions or Suggestions?](mailto:info@scontain.com)