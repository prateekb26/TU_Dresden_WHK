

The reason for that is that the statically linked binary that runs inside of an enclave is wrapped in a dynamically linked *loader* program. The loader program creates the enclave, moves the program code inside the enclave and starts threads that will enter the enclave. The code that is moved inside the enclave is, however, statically linked.

## Using the cross compiler container

How to use the compiler:

* use this as a base image and build your programs inside of a container we a  [Dockerfile](SCONE_Dockerfile.md)), or

* map volumes such that the compiler can compile files living outside the container (see [SCONE Tutorial](SCONE_TUTORIAL.md)).

For an example how to use the crosscompilers, see how to compile a programs written in [GO](GO.md).


## Example

**Note**  on some systems you will need to run *docker* with root permissions, i.e., in this case you should prefix a 


command with *sudo*, i.e., you execute 


One can run the above compiler inside of a container while the compiled files reside outside the container. Say, your code is
in file *myapp.c* in your current directory (*$PWD*). You can compile this code as follows:


This call will generate a binary *a.out* in your working directory. This binary is dynamically linked against musl:


This binary can run natively only if you have musl installed at the correct position in your development machine (and your development machine runs Linux). Alternatively, you can run the binary in a container:


To run this inside of SGX enclaves with SCONE, you need access to the SCONE runtime systems. For more details, see our *hello world* in Section [SCONE Tutorial](SCONE_TUTORIAL.md). This is not very convenient and hence, we provide a) a simpler version with the help of [Dockerfiles](SCONE_Dockerfile.md). 

In most cases, you might just set to use one of our crosscompilers in your *configure* script or *Makefile*. A simple way is to use the Docker image *sconecuratedimages/crosscompilers* as a base image and then clone your code inside the container and set one or more of our compilers (*scone-gcc, scone-g++, scone-gccgo, scone-gfortran, and scone-rustc*) to be used in your build. For Rust, we support also our variant of *cargo* which is *scone-cargo*.

## Debugger support

We also support *gdb* to debug applications running inside of enclaves. To get started, we recommend that you first ensure that your program runs natively linked against musl. Most programs will do - after all, the Alpine Linux distribution is completely based on musl. The debugger is available in image *sconecuratedimages/crosscompilers* as *scone-gdb*.

For example on how to use the debugger, see how to debug a program written in  [GO](GO.md).

&copy; [scontain.com](http://www.scontain.com), November 2017. [Questions or Suggestions?](mailto:info@scontain.com)