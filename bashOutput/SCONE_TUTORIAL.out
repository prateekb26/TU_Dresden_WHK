

If the cross compiler image is not yet installed, read Section [SCONE Curated Container Images](SCONE_Curated_Images.md) to learn how to install the SCONE cross compiler image.

If the docker command fails, please ensure that docker is indeed installed (see [SCONE Host Setup](SCONE_HOST_SETUP.md). Also, on some systems you might need to use *sodo* to run docker commands.


## Install the tutorial

Clone the tutorial:


## Native Hello World 

Ensure that *hello world* runs natively on your machine:


Note that the generated executable, i.e., *sim_hello_world*, will only run on Linux.

## Statically-Linked Hello World

The default cross compiler variant that runs *hello world* inside of an enclave is *scone gcc* and you can find this in container *sconecuratedimages/crosscompilers*.
This variant requires access to the SGX device. 
In Linux, the SGX device is made available as */dev/isgx* and we can give the cross compiler inside of an container access via option *--device=/dev/isgx*:


This generates a statically linked binary. However, as we mentioned above, the binary looks like a dynamically
linked binary since it is wrapped in a dynamically linked loader program:


Ensure that file */etc/sgx-musl.conf* exists. If not, store some default file like:


To run *sgx_hello_world*, in an enclave, just execute:


To see some more debug messages, set environment variable *SCONE_VERSION=1*:


The debug outputs **SCONE_MODE=hw** shows that *sgx_hello_world* runs in hardware mode, i.e., inside an SGX enclave.

**Note.** The compilation as well as the hello world program will fail in case you do not have an SGX driver installed.

## Dynamically-Linked Hello World


To run this natively, just execute the following:


To run a dynamically-linked binary in an enclave, you need to run this in a special runtime environment. In this environment you can ask binaries to run inside of enclaves by setting environment *SCONE_ALPINE=1*. To indicate that we are indeed running inside an enclave, we ask to issue some debug messages from inside the enclave by setting environment variable *SCONE_VERSION=1*:

### Hardware Mode vs Simulation Mode

For debugging, we support three different modes for execution: *hardware, simulation, and automatic*:

- *hardware*: by setting environment variable to **SCONE_MODE=HW**, SCONE will enforce running this application inside an SGX enclave.

- *simulation*: by setting environment variable to **SCONE_MODE=SIM**, SCONE will enforce running this application in native mode (i.e., outside of an enclave). This will run all SCONE functionality but outside enclaves. This is intended for development and debugging on machines that are not SGX-capable.

- *automatic*: by setting environment variable to **SCONE_MODE=AUTO**, SCONE will run the application inside of an SGX enclave if available and otherwise in simulation mode. (This is the default mode)

**NOTE**: In production mode, you must only permit running in hardware mode. Scone ensures this with the help of *remote attestation*: the SCONE configuration and attestation service (CAS) will only provide configuration information and secrets to an application only after it has proven (with the help of SGX CPU extensions) that it is indeed running inside an SGX enclave.

### Execution on a SGX-capable machine


### Execution on a non-SGX machine

If you run this inside a container without access to SGX (/dev/isgx), for example, when running on a Mac, you will see the following error message:


You could run this in simulation mode as follows:


Alternatively, you could run this program in automatic mode:


## Run STRACE

Lets see how we can trace the program. Say, you have compile the program as shown above. After that you enter a cross compiler container and strace hello world as follows:


## Screencast

[![asciicast](https://asciinema.org/a/Qq3TvvFkRndWstBNsP0TnMAdZ.png)](https://asciinema.org/a/Qq3TvvFkRndWstBNsP0TnMAdZ)

&copy; [scontain.com](http://www.scontain.com), November 2017. [Questions or Suggestions?](mailto:info@scontain.com)